# Формат ввода
# В первой строке даны числа
# N и M (1 ≤ N, M ≤ 10^3) — размеры доски, на которой разработчики играют в шашки.
# Каждое поле имеет свой цвет: черный или белый. При этом гарантируется,
# что поле с координатами (1;1) имеет черный цвет.
# Гарантируется также, что поле, имеющее общую границу с черным полем,
# будет иметь белый цвет, а поле, имеющее общую границу с белым полем, — черный цвет.
#
# В следующей строке дано число w — количество белых шашек на поле.
# В следующих w строках задаются два целых числа (1 ≤ i ≤ N, 1 ≤ j ≤ M) — поля, на которых стоят белые шашки.
# В следующей строке дано число b — количество черных шашек на поле.
# В следующих b строках задаются поля с черными шашками, точно так же, как и с белыми.
# Гарантируется, что количество шашек каждого цвета — целое положительное число, и что
# 2≤w+b≤(NM+1)/2. Гарантируется, что все шашки стоят на черных полях.
# В заключительной строке ввода указано, чей ход: "white", если белых, и "black" — если черных.
#
# Формат вывода
# В единственной строке выведите "Yes", если автор хода может срубить шашку соперника,
# и "No" в противоположном случае.
#   1 2 3 4 5 6 7 8
# 1 B W B W B W B W
# 2 W B W B W B W B
# 3 B W B W B W B W
# 4 W B W B W B W B
# 5 B W B W B W B W
# 6 W B W B W B W B
# 7 B W B W B W B W
# 8 W B W B W B W B

#   1 2 3 4 5 6 7 8
# 1 w . . . . . . .
# 2 . b . . . . . .
# 3 . . . . . . . .
# 4 . . . . . . . .
# 5 . . . . . . . .
# 6 . w . . . w . .
# 7 . . . . . . b .
# 8 . . . . . . . b

from pprint import pprint
from typing import Dict


def input_data() -> Dict:
    data = dict()
    data['board'] = list(map(int, input().split()))
    data['white']= []
    data['black'] = []
    for _ in range(int(input())):
        data.get('white').append(list(map(int, input().split())))
    for _ in range(int(input())):
        data.get('black').append(list(map(int, input().split())))
    data['move'] = input()

    return data

def search_valid_move(data: Dict):
    first_move = data.get('move')
    for n in range(len(data[first_move])):
        coord = data[first_move][n]



def main():
    print(input_data())


if __name__ == '__main__':
    main()