"""
В ящике вашего офисного стола лежит печать, которая при штампе ставит число из
n цифр (где n — чётное число). После штампа число на печати увеличивается на 1.
Если больше увеличивать число нельзя (если оно станет состоять из n+1 цифры),
все цифры на печати автоматически ставятся в ноль.
Также число на печати в любой момент может содержать ведущие нули.
Счастливым номером вы считаете такой, у которого сумма первых
2n цифр совпадает с суммой вторых 2n цифр и эта сумма больше нуля.
Например, при n=4 число 1234 не является счастливым, а 1423 является.

Вы видите, что на печати сейчас выставлено число x (не обязательно счастливое).
Найдите следующее счастливое число, которое окажется на печати.

Формат ввода
На вход программе выдаётся число x (0≤x≤10**100000),
состоящее из чётного числа цифр — числа на печати.
В записи числа x могут присутствовать ведущие нули.

Формат вывода.
Выведите одно число — следующий счастливый номер в таком же формате.
Если такого не существует, выведите минимальный счастливый номер.
В выводе не должно быть пробелов и пустых строк в начале.

Примечание.
В первом тесте на печати выставлено число 1422,
не являющееся счастливым, так как 1 + 4 ≠ 2 + 2
Следующее за ним, 1423, является счастливым, так как 1 + 4 = 2 + 3.

Ограничения
Ограничение времени: 1 с.
Ограничение памяти: 256 МБ.
"""


def data_load():
    return input().strip()


def number_is_lucky(n: str) -> bool:
    digits = list(map(int, str(n)))
    half_digits = len(digits) // 2
    return sum(digits[:half_digits]) == sum(digits[half_digits:])


def next_lucky_number(n: str) -> str:
    old_len = len(n)
    n = str(int(n) + 1).zfill(len(str(n)))
    while not number_is_lucky(n):
        if len(str(n)) > old_len:
            n = '0' * old_len
            break
        n = str(int(n) + 1).zfill(len(str(n)))
    return n


def main():
    # number = data_load()
    examples = [
        ('01', '11'),
        ('99', '00'),
        ('9999', '0000'),
        ('1200', '1203'),
        ('1234', '1304'),
        ('1422', '1423'),
        ('1809', '1818'),
    ]
    for num, ans in examples:
        res = next_lucky_number(num)
        assert res == ans, f"{res} != {ans}"


if __name__ == '__main__':
    main()
